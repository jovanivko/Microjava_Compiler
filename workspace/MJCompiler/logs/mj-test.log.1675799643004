INFO  20:52:33,305 - Compiling source file: C:\Users\jovanivko\Desktop\PP1\workspace\MJCompiler\test\test.mj
INFO  20:52:33,347 - #2 program
INFO  20:52:33,347 - #43 prog
INFO  20:52:33,347 - #8 const
INFO  20:52:33,348 - #43 int
INFO  20:52:33,348 - #43 size
INFO  20:52:33,348 - #17 =
INFO  20:52:33,348 - #40 10
INFO  20:52:33,348 - #31 ;
INFO  20:52:33,349 - #8 const
INFO  20:52:33,350 - #43 char
INFO  20:52:33,350 - #43 ch
INFO  20:52:33,350 - #17 =
INFO  20:52:33,350 - #42 a
INFO  20:52:33,350 - #32 ,
INFO  20:52:33,350 - #43 ma
INFO  20:52:33,350 - #17 =
INFO  20:52:33,350 - #42 b
INFO  20:52:33,350 - #31 ;
INFO  20:52:33,351 - #43 int
INFO  20:52:33,351 - #43 rows
INFO  20:52:33,351 - #32 ,
INFO  20:52:33,351 - #43 columns
INFO  20:52:33,351 - #31 ;
INFO  20:52:33,351 - #33 {
INFO  20:52:33,352 - #5 void
INFO  20:52:33,352 - #43 f
INFO  20:52:33,352 - #35 (
INFO  20:52:33,352 - #43 char
INFO  20:52:33,352 - #43 ch
INFO  20:52:33,352 - #32 ,
INFO  20:52:33,352 - #43 int
INFO  20:52:33,352 - #43 a
INFO  20:52:33,352 - #32 ,
INFO  20:52:33,353 - #43 int
INFO  20:52:33,353 - #43 arg
INFO  20:52:33,353 - #36 )
INFO  20:52:33,353 - #43 int
INFO  20:52:33,353 - #43 x
INFO  20:52:33,353 - #31 ;
INFO  20:52:33,354 - #33 {
INFO  20:52:33,354 - #44 if
INFO  20:52:33,354 - #35 (
INFO  20:52:33,354 - #41 true
INFO  20:52:33,354 - #36 )
INFO  20:52:33,355 - #33 {
INFO  20:52:33,355 - #43 ch
INFO  20:52:33,355 - #16 --
INFO  20:52:33,355 - #31 ;
INFO  20:52:33,355 - #34 }
INFO  20:52:33,355 - #43 ch
INFO  20:52:33,356 - #15 ++
INFO  20:52:33,356 - #31 ;
INFO  20:52:33,356 - #43 ch
INFO  20:52:33,356 - #17 =
INFO  20:52:33,356 - #43 ma
INFO  20:52:33,356 - #31 ;
INFO  20:52:33,356 - #43 x
INFO  20:52:33,356 - #17 =
INFO  20:52:33,356 - #43 arg
INFO  20:52:33,356 - #31 ;
INFO  20:52:33,356 - #34 }
INFO  20:52:33,356 - #5 void
INFO  20:52:33,357 - #43 main
INFO  20:52:33,357 - #35 (
INFO  20:52:33,357 - #36 )
INFO  20:52:33,358 - #43 int
INFO  20:52:33,358 - #43 x
INFO  20:52:33,358 - #32 ,
INFO  20:52:33,359 - #43 i
INFO  20:52:33,359 - #31 ;
INFO  20:52:33,360 - #43 char
INFO  20:52:33,360 - #43 c
INFO  20:52:33,360 - #31 ;
INFO  20:52:33,360 - #43 int
INFO  20:52:33,360 - #43 arr
INFO  20:52:33,360 - #37 [
INFO  20:52:33,360 - #38 ]
INFO  20:52:33,360 - #31 ;
INFO  20:52:33,360 - #33 {
INFO  20:52:33,360 - #43 arr
INFO  20:52:33,360 - #17 =
INFO  20:52:33,360 - #9 new
INFO  20:52:33,360 - #43 int
INFO  20:52:33,360 - #37 [
INFO  20:52:33,360 - #40 3
INFO  20:52:33,360 - #38 ]
INFO  20:52:33,360 - #31 ;
INFO  20:52:33,361 - #43 i
INFO  20:52:33,361 - #17 =
INFO  20:52:33,361 - #40 0
INFO  20:52:33,361 - #31 ;
INFO  20:52:33,361 - #46 while
INFO  20:52:33,361 - #35 (
INFO  20:52:33,361 - #43 i
INFO  20:52:33,361 - #21 <
INFO  20:52:33,361 - #40 3
INFO  20:52:33,362 - #36 )
INFO  20:52:33,363 - #33 {
INFO  20:52:33,363 - #43 arr
INFO  20:52:33,363 - #37 [
INFO  20:52:33,363 - #43 i
INFO  20:52:33,363 - #38 ]
INFO  20:52:33,363 - #17 =
INFO  20:52:33,363 - #43 i
INFO  20:52:33,363 - #31 ;
INFO  20:52:33,363 - #43 i
INFO  20:52:33,363 - #15 ++
INFO  20:52:33,363 - #31 ;
INFO  20:52:33,363 - #34 }
INFO  20:52:33,363 - #43 arr
INFO  20:52:33,363 - #29 .
INFO  20:52:33,363 - #47 foreach
INFO  20:52:33,363 - #35 (
INFO  20:52:33,364 - #43 x
INFO  20:52:33,364 - #39 =>
INFO  20:52:33,364 - #3 print
INFO  20:52:33,364 - #35 (
INFO  20:52:33,364 - #43 x
INFO  20:52:33,364 - #36 )
INFO  20:52:33,364 - #31 ;
INFO  20:52:33,364 - #36 )
INFO  20:52:33,364 - #31 ;
INFO  20:52:33,364 - #43 val
INFO  20:52:33,364 - #29 .
INFO  20:52:33,364 - #43 pos
ERROR 20:52:33,364 - 
Sintaksna greska na liniji 21
INFO  20:52:33,364 - #17 =
INFO  20:52:33,365 - #9 new
INFO  20:52:33,365 - #43 int
INFO  20:52:33,365 - #37 [
INFO  20:52:33,365 - #43 size
INFO  20:52:33,365 - #38 ]
INFO  20:52:33,365 - #31 ;
INFO  20:52:33,365 - #43 val
INFO  20:52:33,365 - #29 .
INFO  20:52:33,365 - #43 neg
ERROR 20:52:33,365 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 21
ERROR 20:52:33,366 - 
Sintaksna greska na liniji 22
INFO  20:52:33,366 - #17 =
INFO  20:52:33,366 - #9 new
INFO  20:52:33,366 - #43 int
INFO  20:52:33,366 - #37 [
INFO  20:52:33,366 - #43 size
INFO  20:52:33,366 - #38 ]
INFO  20:52:33,366 - #31 ;
INFO  20:52:33,366 - #10 read
INFO  20:52:33,366 - #35 (
INFO  20:52:33,366 - #43 x
ERROR 20:52:33,366 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 22
INFO  20:52:33,366 - #36 )
INFO  20:52:33,366 - #31 ;
INFO  20:52:33,366 - #37 [
INFO  20:52:33,367 - #43 i
INFO  20:52:33,367 - #32 ,
INFO  20:52:33,367 - #32 ,
INFO  20:52:33,367 - #43 x
INFO  20:52:33,367 - #38 ]
INFO  20:52:33,367 - #17 =
INFO  20:52:33,367 - #43 arr
INFO  20:52:33,367 - #31 ;
INFO  20:52:33,367 - #46 while
INFO  20:52:33,368 - #35 (
INFO  20:52:33,368 - #43 i
INFO  20:52:33,368 - #21 <
INFO  20:52:33,368 - #43 size
INFO  20:52:33,368 - #36 )
INFO  20:52:33,368 - #33 {
INFO  20:52:33,368 - #43 val
INFO  20:52:33,368 - #29 .
INFO  20:52:33,368 - #43 putp
ERROR 20:52:33,368 - 
Sintaksna greska na liniji 26
INFO  20:52:33,368 - #35 (
INFO  20:52:33,368 - #40 0
INFO  20:52:33,368 - #32 ,
INFO  20:52:33,368 - #43 i
INFO  20:52:33,368 - #36 )
INFO  20:52:33,368 - #31 ;
INFO  20:52:33,368 - #43 val
INFO  20:52:33,368 - #29 .
INFO  20:52:33,368 - #43 putn
ERROR 20:52:33,368 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 26
ERROR 20:52:33,368 - 
Sintaksna greska na liniji 27
INFO  20:52:33,369 - #35 (
INFO  20:52:33,369 - #40 0
INFO  20:52:33,369 - #32 ,
INFO  20:52:33,369 - #43 i
INFO  20:52:33,369 - #36 )
INFO  20:52:33,369 - #31 ;
INFO  20:52:33,369 - #43 i
INFO  20:52:33,369 - #15 ++
INFO  20:52:33,369 - #31 ;
ERROR 20:52:33,369 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 27
INFO  20:52:33,369 - #34 }
INFO  20:52:33,369 - #43 f
INFO  20:52:33,369 - #35 (
INFO  20:52:33,369 - #43 c
INFO  20:52:33,369 - #32 ,
INFO  20:52:33,369 - #43 x
INFO  20:52:33,369 - #32 ,
INFO  20:52:33,369 - #43 i
INFO  20:52:33,369 - #36 )
INFO  20:52:33,370 - #31 ;
INFO  20:52:33,370 - #10 read
INFO  20:52:33,370 - #35 (
INFO  20:52:33,370 - #43 rows
INFO  20:52:33,370 - #36 )
INFO  20:52:33,370 - #31 ;
INFO  20:52:33,370 - #43 x
INFO  20:52:33,370 - #17 =
INFO  20:52:33,370 - #43 rows
INFO  20:52:33,370 - #31 ;
INFO  20:52:33,370 - #46 while
INFO  20:52:33,370 - #35 (
INFO  20:52:33,370 - #41 true
INFO  20:52:33,370 - #36 )
INFO  20:52:33,370 - #33 {
INFO  20:52:33,370 - #44 if
INFO  20:52:33,370 - #35 (
INFO  20:52:33,370 - #43 x
INFO  20:52:33,370 - #22 <=
INFO  20:52:33,370 - #40 0
INFO  20:52:33,371 - #36 )
INFO  20:52:33,371 - #6 break
INFO  20:52:33,371 - #31 ;
INFO  20:52:33,371 - #44 if
INFO  20:52:33,371 - #35 (
INFO  20:52:33,371 - #40 0
INFO  20:52:33,372 - #22 <=
INFO  20:52:33,372 - #43 x
INFO  20:52:33,372 - #27 &&
INFO  20:52:33,373 - #43 x
INFO  20:52:33,373 - #21 <
INFO  20:52:33,373 - #43 size
INFO  20:52:33,373 - #36 )
INFO  20:52:33,373 - #33 {
INFO  20:52:33,373 - #43 val
INFO  20:52:33,373 - #29 .
INFO  20:52:33,373 - #43 putp
ERROR 20:52:33,373 - 
Sintaksna greska na liniji 37
INFO  20:52:33,373 - #35 (
INFO  20:52:33,373 - #43 val
INFO  20:52:33,373 - #29 .
INFO  20:52:33,373 - #43 getp
INFO  20:52:33,373 - #35 (
INFO  20:52:33,373 - #43 x
INFO  20:52:33,373 - #36 )
INFO  20:52:33,373 - #13 +
INFO  20:52:33,373 - #40 1
INFO  20:52:33,373 - #36 )
INFO  20:52:33,373 - #31 ;
INFO  20:52:33,373 - #34 }
INFO  20:52:33,374 - #45 else
INFO  20:52:33,374 - #44 if
ERROR 20:52:33,374 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 37
INFO  20:52:33,374 - #35 (
INFO  20:52:33,374 - #23 -
INFO  20:52:33,374 - #43 size
INFO  20:52:33,374 - #21 <
INFO  20:52:33,374 - #43 x
INFO  20:52:33,374 - #27 &&
INFO  20:52:33,374 - #43 x
INFO  20:52:33,374 - #21 <
INFO  20:52:33,374 - #40 0
INFO  20:52:33,374 - #36 )
INFO  20:52:33,374 - #33 {
INFO  20:52:33,374 - #43 val
INFO  20:52:33,374 - #29 .
INFO  20:52:33,374 - #43 putn
ERROR 20:52:33,375 - 
Sintaksna greska na liniji 41
INFO  20:52:33,375 - #35 (
INFO  20:52:33,375 - #43 val
INFO  20:52:33,375 - #29 .
INFO  20:52:33,375 - #43 getn
INFO  20:52:33,375 - #35 (
INFO  20:52:33,375 - #23 -
INFO  20:52:33,375 - #43 x
INFO  20:52:33,375 - #36 )
INFO  20:52:33,375 - #13 +
INFO  20:52:33,375 - #40 1
INFO  20:52:33,375 - #36 )
INFO  20:52:33,375 - #31 ;
INFO  20:52:33,375 - #34 }
INFO  20:52:33,375 - #10 read
INFO  20:52:33,375 - #35 (
ERROR 20:52:33,375 - Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji 41
INFO  20:52:33,375 - #43 x
INFO  20:52:33,375 - #36 )
INFO  20:52:33,375 - #31 ;
INFO  20:52:33,375 - #34 }
INFO  20:52:33,375 - #34 }
INFO  20:52:33,375 - #34 }
INFO  20:52:33,383 - Program(
  ProgName(
   prog
  ) [ProgName]
  Declarations(
    Declarations(
      Declarations(
        NoDecl(
        ) [NoDecl]
        DeclConst(
          ConstDecl(
            Type(
             int
            ) [Type]
            GlobalConst(
              ConstName(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstName]
            ) [GlobalConst]
          ) [ConstDecl]
        ) [DeclConst]
      ) [Declarations]
      DeclConst(
        ConstDecl(
          Type(
           char
          ) [Type]
          GlobalConstDeclList(
            GlobalConst(
              ConstName(
               ch
                CharConst(
                 a
                ) [CharConst]
              ) [ConstName]
            ) [GlobalConst]
            ConstName(
             ma
              CharConst(
               b
              ) [CharConst]
            ) [ConstName]
          ) [GlobalConstDeclList]
        ) [ConstDecl]
      ) [DeclConst]
    ) [Declarations]
    DeclVar(
      VarDeclaration(
        Type(
         int
        ) [Type]
        VarList(
          SingleVar(
            VarSingleName(
             rows
            ) [VarSingleName]
          ) [SingleVar]
          VarSingleName(
           columns
          ) [VarSingleName]
        ) [VarList]
      ) [VarDeclaration]
    ) [DeclVar]
  ) [Declarations]
  GlobalMethods(
    MethodDeclarations(
      Meth(
        MethodDecl(
          MethodVoidName(
           f
          ) [MethodVoidName]
          FormParams(
            FormalParamDecls(
              FormalParamDecls(
                SingleFormalParamDecl(
                  FormalParamDeclSing(
                    Type(
                     char
                    ) [Type]
                   ch
                  ) [FormalParamDeclSing]
                ) [SingleFormalParamDecl]
                FormalParamDeclSing(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclSing]
              ) [FormalParamDecls]
              FormalParamDeclSing(
                Type(
                 int
                ) [Type]
               arg
              ) [FormalParamDeclSing]
            ) [FormalParamDecls]
          ) [FormParams]
          VarDecls(
            NoVars(
            ) [NoVars]
            VarDeclaration(
              Type(
               int
              ) [Type]
              SingleVar(
                VarSingleName(
                 x
                ) [VarSingleName]
              ) [SingleVar]
            ) [VarDeclaration]
          ) [VarDecls]
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  If(
                    CondORFact(
                      CondAndFact(
                        BoolExpr(
                          TermExpr(
                            TermSingle(
                              Const(
                                BoolConst(
                                 true
                                ) [BoolConst]
                              ) [Const]
                            ) [TermSingle]
                          ) [TermExpr]
                        ) [BoolExpr]
                      ) [CondAndFact]
                    ) [CondORFact]
                    StatementBlock(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        SingleStatement(
                          Decr(
                            Desig(
                             ch
                            ) [Desig]
                          ) [Decr]
                        ) [SingleStatement]
                      ) [Statements]
                    ) [StatementBlock]
                  ) [If]
                ) [Statements]
                SingleStatement(
                  Incr(
                    Desig(
                     ch
                    ) [Desig]
                  ) [Incr]
                ) [SingleStatement]
              ) [Statements]
              SingleStatement(
                Assignment(
                  Desig(
                   ch
                  ) [Desig]
                  TermExpr(
                    TermSingle(
                      Var(
                        Desig(
                         ma
                        ) [Desig]
                      ) [Var]
                    ) [TermSingle]
                  ) [TermExpr]
                ) [Assignment]
              ) [SingleStatement]
            ) [Statements]
            SingleStatement(
              Assignment(
                Desig(
                 x
                ) [Desig]
                TermExpr(
                  TermSingle(
                    Var(
                      Desig(
                       arg
                      ) [Desig]
                    ) [Var]
                  ) [TermSingle]
                ) [TermExpr]
              ) [Assignment]
            ) [SingleStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [Meth]
      MethodDecl(
        MethodVoidName(
         main
        ) [MethodVoidName]
        NoFormParam(
        ) [NoFormParam]
        VarDecls(
          VarDecls(
            VarDecls(
              NoVars(
              ) [NoVars]
              VarDeclaration(
                Type(
                 int
                ) [Type]
                VarList(
                  SingleVar(
                    VarSingleName(
                     x
                    ) [VarSingleName]
                  ) [SingleVar]
                  VarSingleName(
                   i
                  ) [VarSingleName]
                ) [VarList]
              ) [VarDeclaration]
            ) [VarDecls]
            VarDeclaration(
              Type(
               char
              ) [Type]
              SingleVar(
                VarSingleName(
                 c
                ) [VarSingleName]
              ) [SingleVar]
            ) [VarDeclaration]
          ) [VarDecls]
          VarDeclaration(
            Type(
             int
            ) [Type]
            SingleVar(
              VarArrayName(
               arr
              ) [VarArrayName]
            ) [SingleVar]
          ) [VarDeclaration]
        ) [VarDecls]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  NoStmt(
                                  ) [NoStmt]
                                  SingleStatement(
                                    Assignment(
                                      Desig(
                                       arr
                                      ) [Desig]
                                      TermExpr(
                                        TermSingle(
                                          NewArray(
                                            Type(
                                             int
                                            ) [Type]
                                            TermExpr(
                                              TermSingle(
                                                Const(
                                                  NumConst(
                                                   3
                                                  ) [NumConst]
                                                ) [Const]
                                              ) [TermSingle]
                                            ) [TermExpr]
                                          ) [NewArray]
                                        ) [TermSingle]
                                      ) [TermExpr]
                                    ) [Assignment]
                                  ) [SingleStatement]
                                ) [Statements]
                                SingleStatement(
                                  Assignment(
                                    Desig(
                                     i
                                    ) [Desig]
                                    TermExpr(
                                      TermSingle(
                                        Const(
                                          NumConst(
                                           0
                                          ) [NumConst]
                                        ) [Const]
                                      ) [TermSingle]
                                    ) [TermExpr]
                                  ) [Assignment]
                                ) [SingleStatement]
                              ) [Statements]
                              While(
                                CondORFact(
                                  CondAndFact(
                                    RelExpr(
                                      BoolExpr(
                                        TermExpr(
                                          TermSingle(
                                            Var(
                                              Desig(
                                               i
                                              ) [Desig]
                                            ) [Var]
                                          ) [TermSingle]
                                        ) [TermExpr]
                                      ) [BoolExpr]
                                      LssOp(
                                      ) [LssOp]
                                      TermExpr(
                                        TermSingle(
                                          Const(
                                            NumConst(
                                             3
                                            ) [NumConst]
                                          ) [Const]
                                        ) [TermSingle]
                                      ) [TermExpr]
                                    ) [RelExpr]
                                  ) [CondAndFact]
                                ) [CondORFact]
                                StatementBlock(
                                  Statements(
                                    Statements(
                                      NoStmt(
                                      ) [NoStmt]
                                      SingleStatement(
                                        Assignment(
                                          ArrayDesignator(
                                           arr
                                            TermExpr(
                                              TermSingle(
                                                Var(
                                                  Desig(
                                                   i
                                                  ) [Desig]
                                                ) [Var]
                                              ) [TermSingle]
                                            ) [TermExpr]
                                          ) [ArrayDesignator]
                                          TermExpr(
                                            TermSingle(
                                              Var(
                                                Desig(
                                                 i
                                                ) [Desig]
                                              ) [Var]
                                            ) [TermSingle]
                                          ) [TermExpr]
                                        ) [Assignment]
                                      ) [SingleStatement]
                                    ) [Statements]
                                    SingleStatement(
                                      Incr(
                                        Desig(
                                         i
                                        ) [Desig]
                                      ) [Incr]
                                    ) [SingleStatement]
                                  ) [Statements]
                                ) [StatementBlock]
                              ) [While]
                            ) [Statements]
                            ForEach(
                              Desig(
                               arr
                              ) [Desig]
                             x
                              Print(
                                PrintE(
                                  TermExpr(
                                    TermSingle(
                                      Var(
                                        Desig(
                                         x
                                        ) [Desig]
                                      ) [Var]
                                    ) [TermSingle]
                                  ) [TermExpr]
                                ) [PrintE]
                              ) [Print]
                            ) [ForEach]
                          ) [Statements]
                          SingleStatement(
                            ErrAssignment(
                            ) [ErrAssignment]
                          ) [SingleStatement]
                        ) [Statements]
                        SingleStatement(
                          ErrAssignment(
                          ) [ErrAssignment]
                        ) [SingleStatement]
                      ) [Statements]
                      Read(
                        Desig(
                         x
                        ) [Desig]
                      ) [Read]
                    ) [Statements]
                    SingleStatement(
                      MulAssignment(
                        AssignMul(
                          AssignMul(
                            AssignSingle(
                              AssignDest(
                                Desig(
                                 i
                                ) [Desig]
                              ) [AssignDest]
                            ) [AssignSingle]
                            NoDes(
                            ) [NoDes]
                          ) [AssignMul]
                          AssignDest(
                            Desig(
                             x
                            ) [Desig]
                          ) [AssignDest]
                        ) [AssignMul]
                        Desig(
                         arr
                        ) [Desig]
                      ) [MulAssignment]
                    ) [SingleStatement]
                  ) [Statements]
                  While(
                    CondORFact(
                      CondAndFact(
                        RelExpr(
                          BoolExpr(
                            TermExpr(
                              TermSingle(
                                Var(
                                  Desig(
                                   i
                                  ) [Desig]
                                ) [Var]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [BoolExpr]
                          LssOp(
                          ) [LssOp]
                          TermExpr(
                            TermSingle(
                              Var(
                                Desig(
                                 size
                                ) [Desig]
                              ) [Var]
                            ) [TermSingle]
                          ) [TermExpr]
                        ) [RelExpr]
                      ) [CondAndFact]
                    ) [CondORFact]
                    StatementBlock(
                      Statements(
                        Statements(
                          Statements(
                            NoStmt(
                            ) [NoStmt]
                            SingleStatement(
                              ErrAssignment(
                              ) [ErrAssignment]
                            ) [SingleStatement]
                          ) [Statements]
                          SingleStatement(
                            ErrAssignment(
                            ) [ErrAssignment]
                          ) [SingleStatement]
                        ) [Statements]
                        SingleStatement(
                          Incr(
                            Desig(
                             i
                            ) [Desig]
                          ) [Incr]
                        ) [SingleStatement]
                      ) [Statements]
                    ) [StatementBlock]
                  ) [While]
                ) [Statements]
                SingleStatement(
                  ProcCall(
                    Desig(
                     f
                    ) [Desig]
                    Actuals(
                      ActualParams(
                        ActualParams(
                          ActualParam(
                            TermExpr(
                              TermSingle(
                                Var(
                                  Desig(
                                   c
                                  ) [Desig]
                                ) [Var]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [ActualParam]
                          TermExpr(
                            TermSingle(
                              Var(
                                Desig(
                                 x
                                ) [Desig]
                              ) [Var]
                            ) [TermSingle]
                          ) [TermExpr]
                        ) [ActualParams]
                        TermExpr(
                          TermSingle(
                            Var(
                              Desig(
                               i
                              ) [Desig]
                            ) [Var]
                          ) [TermSingle]
                        ) [TermExpr]
                      ) [ActualParams]
                    ) [Actuals]
                  ) [ProcCall]
                ) [SingleStatement]
              ) [Statements]
              Read(
                Desig(
                 rows
                ) [Desig]
              ) [Read]
            ) [Statements]
            SingleStatement(
              Assignment(
                Desig(
                 x
                ) [Desig]
                TermExpr(
                  TermSingle(
                    Var(
                      Desig(
                       rows
                      ) [Desig]
                    ) [Var]
                  ) [TermSingle]
                ) [TermExpr]
              ) [Assignment]
            ) [SingleStatement]
          ) [Statements]
          While(
            CondORFact(
              CondAndFact(
                BoolExpr(
                  TermExpr(
                    TermSingle(
                      Const(
                        BoolConst(
                         true
                        ) [BoolConst]
                      ) [Const]
                    ) [TermSingle]
                  ) [TermExpr]
                ) [BoolExpr]
              ) [CondAndFact]
            ) [CondORFact]
            StatementBlock(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    If(
                      CondORFact(
                        CondAndFact(
                          RelExpr(
                            BoolExpr(
                              TermExpr(
                                TermSingle(
                                  Var(
                                    Desig(
                                     x
                                    ) [Desig]
                                  ) [Var]
                                ) [TermSingle]
                              ) [TermExpr]
                            ) [BoolExpr]
                            LssEOp(
                            ) [LssEOp]
                            TermExpr(
                              TermSingle(
                                Const(
                                  NumConst(
                                   0
                                  ) [NumConst]
                                ) [Const]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [RelExpr]
                        ) [CondAndFact]
                      ) [CondORFact]
                      Break(
                      ) [Break]
                    ) [If]
                  ) [Statements]
                  IfElse(
                    CondORFact(
                      AndTerm(
                        CondAndFact(
                          RelExpr(
                            BoolExpr(
                              TermExpr(
                                TermSingle(
                                  Const(
                                    NumConst(
                                     0
                                    ) [NumConst]
                                  ) [Const]
                                ) [TermSingle]
                              ) [TermExpr]
                            ) [BoolExpr]
                            LssEOp(
                            ) [LssEOp]
                            TermExpr(
                              TermSingle(
                                Var(
                                  Desig(
                                   x
                                  ) [Desig]
                                ) [Var]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [RelExpr]
                        ) [CondAndFact]
                        RelExpr(
                          BoolExpr(
                            TermExpr(
                              TermSingle(
                                Var(
                                  Desig(
                                   x
                                  ) [Desig]
                                ) [Var]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [BoolExpr]
                          LssOp(
                          ) [LssOp]
                          TermExpr(
                            TermSingle(
                              Var(
                                Desig(
                                 size
                                ) [Desig]
                              ) [Var]
                            ) [TermSingle]
                          ) [TermExpr]
                        ) [RelExpr]
                      ) [AndTerm]
                    ) [CondORFact]
                    StatementBlock(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        SingleStatement(
                          ErrAssignment(
                          ) [ErrAssignment]
                        ) [SingleStatement]
                      ) [Statements]
                    ) [StatementBlock]
                    If(
                      CondORFact(
                        AndTerm(
                          CondAndFact(
                            RelExpr(
                              BoolExpr(
                                NegTermExpr(
                                  TermSingle(
                                    Var(
                                      Desig(
                                       size
                                      ) [Desig]
                                    ) [Var]
                                  ) [TermSingle]
                                ) [NegTermExpr]
                              ) [BoolExpr]
                              LssOp(
                              ) [LssOp]
                              TermExpr(
                                TermSingle(
                                  Var(
                                    Desig(
                                     x
                                    ) [Desig]
                                  ) [Var]
                                ) [TermSingle]
                              ) [TermExpr]
                            ) [RelExpr]
                          ) [CondAndFact]
                          RelExpr(
                            BoolExpr(
                              TermExpr(
                                TermSingle(
                                  Var(
                                    Desig(
                                     x
                                    ) [Desig]
                                  ) [Var]
                                ) [TermSingle]
                              ) [TermExpr]
                            ) [BoolExpr]
                            LssOp(
                            ) [LssOp]
                            TermExpr(
                              TermSingle(
                                Const(
                                  NumConst(
                                   0
                                  ) [NumConst]
                                ) [Const]
                              ) [TermSingle]
                            ) [TermExpr]
                          ) [RelExpr]
                        ) [AndTerm]
                      ) [CondORFact]
                      StatementBlock(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          SingleStatement(
                            ErrAssignment(
                            ) [ErrAssignment]
                          ) [SingleStatement]
                        ) [Statements]
                      ) [StatementBlock]
                    ) [If]
                  ) [IfElse]
                ) [Statements]
                Read(
                  Desig(
                   x
                  ) [Desig]
                ) [Read]
              ) [Statements]
            ) [StatementBlock]
          ) [While]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarations]
  ) [GlobalMethods]
) [Program]
INFO  20:52:33,383 - ===================================
INFO  20:52:33,386 - Deklarisana konstanta size na liniji 2
INFO  20:52:33,386 - Deklarisana konstanta ch na liniji 3
INFO  20:52:33,386 - Deklarisana konstanta ma na liniji 3
INFO  20:52:33,386 - Obradjuje se funkcija f na liniji 6
INFO  20:52:33,386 - Pronadjeno ch rs.etf.pp1.symboltable.concepts.Obj@6e2c634b na liniji 7
ERROR 20:52:33,386 - Greska na liniji 7 : ch nije tipa kompatibilnog za dekrementiranje! 
INFO  20:52:33,386 - Pronadjeno ch rs.etf.pp1.symboltable.concepts.Obj@6e2c634b na liniji 8
ERROR 20:52:33,387 - Greska na liniji 8 : ch nije tipa kompatibilnog za inkrementiranje! 
INFO  20:52:33,387 - Pronadjeno ch rs.etf.pp1.symboltable.concepts.Obj@6e2c634b na liniji 9
INFO  20:52:33,387 - Pronadjeno ma rs.etf.pp1.symboltable.concepts.Obj@37a71e93 na liniji 9
ERROR 20:52:33,387 - Greska na liniji 10 : ime x nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 10 : ime arg nije deklarisano! 
INFO  20:52:33,387 - Obradjuje se funkcija main na liniji 12
ERROR 20:52:33,387 - Greska na liniji 14 : ime arr nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 14 :  nekompatibilni tipovi u dodeli vrednosti 
ERROR 20:52:33,387 - Greska na liniji 15 : ime i nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 15 :  nekompatibilni tipovi u dodeli vrednosti 
ERROR 20:52:33,387 - Greska na liniji 16 : ime i nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 17 : ime i nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 17 : ime arr nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 17 : ime i nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 18 : ime i nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 18 : noObj nije tipa kompatibilnog za inkrementiranje! 
ERROR 20:52:33,387 - Greska na liniji 20 : ime arr nije deklarisano! 
ERROR 20:52:33,387 - Greska na liniji 20 : ime x nije deklarisano! 
ERROR 20:52:33,387 - Expression mora biti primitivnog tipa! na liniji 20
ERROR 20:52:33,387 - Greska na liniji 23 : ime x nije deklarisano! 
ERROR 20:52:33,387 - Designator mora biti primitivnog tipa! na liniji 23
ERROR 20:52:33,388 - Greska na liniji 24 : ime i nije deklarisano! 
ERROR 20:52:33,388 - Greska na liniji 24 : ime x nije deklarisano! 
ERROR 20:52:33,388 - Greska na liniji 24 : ime arr nije deklarisano! 
ERROR 20:52:33,388 - Promenljiva noObj mora biti tipa niza na liniji 24

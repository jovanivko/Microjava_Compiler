package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}


init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, CONST, NEW, READ, EXTENDS, CONTINUE;
terminal PLUS, EQUAL, INCR, DECR, ASSIGN, NEQUAL, GRT, GRTE, LSS, LSSE, MINUS, MUL, DIV, MOD, AND, OR;
terminal DOT, COLON, SEMI, COMMA, LBRACE, RBRACE, LPAREN, RPAREN, LBOX, RBOX, DBLARROW;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;
terminal IF, ELSE, WHILE, FOREACH;

nonterminal MethodDeclList, DeclList, VarDecl, ConstDecl, ClassDecl, VarNameList, AssExpr;
nonterminal StatementList, Statement, AddOp, MulOp, RelOp, Decl, DesignatorStatement;
nonterminal VarDeclList, VarNameDecl, VarListEntry;
nonterminal GlobalMethodDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct PrintExpr, Type, Term, Expr, Factor, ConstVal, ConstName, ConstNameList, VarName;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE GlobalMethodDecl RBRACE
			;

ProgName ::= (ProgName) IDENT:pName
			;

GlobalMethodDecl ::= (GlobalMethods) MethodDeclList
					|
					(NoGlobalMethods) /*epsilon*/
					;

DeclList ::= (Declarations) DeclList Decl
			|
			(NoDecl)/* epsilon */ 
			;
				
Decl ::= 	(DeclVar) VarDecl
			|
			(DeclConst) ConstDecl
			;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVars) /* epsilon */
				;
	
VarDecl ::= (VarDeclaration) Type:varType VarNameDecl
			;

VarNameDecl ::= (VarNameDecls) VarNameList:varList SEMI
				|
				(ErrVarDecl) error SEMI:l
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do ; u liniji " + lleft, null); :}
				;

VarNameList ::= (VarList) VarListEntry:vnl VarName:varName
				|
				(SingleVar)	VarName:varName
				;

VarListEntry ::= (VarListEntries) VarListEntry VarName:varName COMMA
				|
				(ErrVarDeclList) error COMMA:l
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do , u liniji " + lleft, null); :}
				|
				(VarListEntrySingle) VarName:varName COMMA
				;

VarName ::= (VarSingleName)	IDENT:name
			|
			(VarArrayName)	IDENT:name LBOX RBOX
			|
			(VarMatrixName)	IDENT:name LBOX RBOX LBOX RBOX
			;


ConstDecl ::=	(ConstDecl) CONST Type:constType ConstNameList SEMI
				;

ConstNameList ::=(GlobalConstDeclList) ConstNameList COMMA ConstName
				|
				(GlobalConst)	ConstName
				;

ConstName ::= (ConstName) IDENT:constName ASSIGN ConstVal:constVal
			;

ConstVal ::=(NumConst) NUMCONST
			|
			(BoolConst)	BOOLCONST
			|
			(CharConst)	CHARCONST
			;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(Meth) MethodDecl
					;

MethodDecl ::= 	(MethodDecl) MethodTypeName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
			   ;

MethodTypeName ::= 	(MethodNonVoidName) Type:retType IDENT:methName
					|
					(MethodVoidName) VOID IDENT:methName
					;

Type ::= (Type) IDENT:typeName
		;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::=	(SingleStatement) DesignatorStatement
				|
				(Read) READ LPAREN Designator RPAREN SEMI
				|
				(Print) PRINT LPAREN PrintExpr RPAREN SEMI
				;
			
PrintExpr ::=	(PrintE) Expr
				| 
				(PrintNum) Expr COMMA NUMCONST
				;

DesignatorStatement ::= (Assignment) Designator:dest ASSIGN AssExpr
			  			|
			  			(Incr) Designator INCR SEMI
			  			|
			  			(Decr) Designator DECR SEMI
					  	;

AssExpr ::= (AssignExpr) Expr:e SEMI
			|
			(ErrAssignment)error SEMI:l
			{: parser.report_error("Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji " + lleft, null); :}
			;

Expr ::= (AddExpr) Expr:te AddOp Term:t
		 |
		 (TermExpr) Term:t
		 |
		 (NegTermExpr) MINUS Term:t
		 ;

Term ::= 	(MulTerm) Term:term MulOp Factor:factor
			|
			(TermSingle) Factor:factor
			;

Factor ::= (Const) ConstVal
			|
		   (Var) Designator:d
		   	|
		   (ArgCall) LPAREN Expr RPAREN
		   |
		   (NewArray) NEW Type LBOX Expr:e RBOX
		   |
		   (NewMatrix) NEW Type LBOX Expr:e1 RBOX LBOX Expr:e2 RBOX
		   ;
		   
Designator ::= 	(Desig) IDENT:name
				|
				(ArrayDesignator) IDENT:name LBOX Expr:e RBOX
				|
				(MatrixDesignator) IDENT:name LBOX Expr:e1 RBOX LBOX Expr:e2 RBOX
				;
	
RelOp ::=	(EqOp) EQUAL
			|
			(NeqOp) NEQUAL
			|
			(LssOp) LSS
			|
			(LssEOp) LSSE
			|
			(GrtOp) GRT
			|
			(GrtEOp) GRTE
			;

AddOp ::=	(AddsOp) PLUS 
			|
		 	(SubOp) MINUS
			;

MulOp ::= 	(MulsOp) MUL
			|
		 	(DivOp) DIV
			|
		 	(ModOp) MOD
			;
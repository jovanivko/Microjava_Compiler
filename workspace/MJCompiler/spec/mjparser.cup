package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, CONST, NEW, READ, EXTENDS, CONTINUE;
terminal PLUS, EQUAL, INCR, DECR, ASSIGN, NEQUAL, GRT, GRTE, LSS, LSSE, MINUS, MUL, DIV, MOD, AND, OR;
terminal DOT, COLON, SEMI, COMMA, LBRACE, RBRACE, LPAREN, RPAREN, LBOX, RBOX, DBLARROW;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;
terminal IF, ELSE, WHILE, FOREACH;

nonterminal Program, ProgName, Designator, MethodDecl, MethodTypeName;
nonterminal Type, Term, Expr, Factor;

nonterminal MethodDeclList, DeclList, VarDecl, ConstDecl, ClassDecl, ConstVal;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, AddOp, MulOp, RelOp, Decl, DesignatorStatement;
nonterminal ClassExtend, ClassBody, VarDeclList, ClassMethodList, ConstructorDeclList, ConstructorDecl;
nonterminal PrintExpr, AssignList, AssignDes, Condition, CondTerm, CondFact;

/*nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor; */

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE
;

ProgName ::= (ProgName) IDENT:pName
;

DeclList ::= (Declarations) DeclList Decl
			|
			(NoDecl)/* epsilon */ 
			;
				
Decl ::= 	(DeclVar) VarDecl
			|
			(DeclConst) ConstDecl
			|
			(DeclClass) ClassDecl
			;
				
VarDecl ::= (VarSingleDecl) Type:varType IDENT:varName SEMI
			|
			(VarArrayDecl) Type:arrType IDENT:arrName LBOX RBOX SEMI
			;


ConstDecl ::=	(ConstDecl) CONST Type:constType IDENT:constName ASSIGN ConstVal:constVal SEMI
				;

ConstVal ::=	(NumConst) NUMCONST
			|
			(BoolConst)	BOOLCONST
			|
			(CharConst)	CHARCONST
			;

ClassDecl ::= (ClassDecl) CLASS IDENT:className ClassExtend LBRACE ClassBody RBRACE
				;

ClassExtend ::= (ExtendClause) EXTENDS Type:classParent
				|
				(NoClassExtend) /* epsilon */
				;
				
ClassBody ::= (ClassBody) VarDeclList LBRACE ClassMethodList RBRACE
			;

VarDeclList ::= (VarDecls) VarDeclList VarDecl
				|
				(NoVars) /* epsilon */
				;
				


ClassMethodList	::= (ClassMethods)LBRACE ConstructorDeclList MethodDeclList RBRACE
					|
					(NoClassMethods) /* epsilon */
					;

ConstructorDeclList ::= (Constructors) ConstructorDeclList ConstructorDecl
						|
						(NoConstr) /* epsilon */
						; 

ConstructorDecl ::= (ConstructorDecl) IDENT:className LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
					;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl) /* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= 	(MethodQualName) Type:retType IDENT:methName
					|
					(MethodVoidName) VOID IDENT:methName
					;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDeclSing) Type IDENT 
					|
					(FormalParamArrayDecl) Type IDENT LBOX RBOX
					;

Type ::= (Type) IDENT:typeName
		;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::=	(SingleStatement) DesignatorStatement SEMI
				|
				(Read) READ LPAREN Designator RPAREN SEMI
				|
				(Print) PRINT LPAREN PrintExpr RPAREN SEMI
				|
				(If) IF LPAREN Condition RPAREN Statement
				|
				(IfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				(While) WHILE LPAREN Condition RPAREN Statement
				|
				(Break) BREAK SEMI
				|
				(Continue) CONTINUE SEMI
				|
				(ReturnNoExpr) RETURN SEMI
				|
				(ReturnExpr) RETURN Expr:t SEMI
				|
				(ForEach) Designator DOT FOREACH LPAREN IDENT:e DBLARROW Statement RPAREN SEMI
				|
				(StatementBlock) LBRACE StatementList RBRACE
				;
			
PrintExpr ::=	(PrintE) Expr
				| 
				(PrintNum) Expr COMMA NUMCONST
				;

DesignatorStatement ::= (Assignment) Designator:dest EQUAL Expr:e
			  			|
			  			(MulAssignment) LBOX AssignList:des RBOX EQUAL Designator:arr
			  			|
			  			(Incr) Designator INCR
			  			|
			  			(Decr) Designator DECR
			  			|
					  	(ProcCall) Designator:func LPAREN ActualPars RPAREN
					  	;



AssignList ::=	(AssignMul) AssignList COMMA AssignDes
				|
				(AssignSingle) AssignDes
				;

AssignDes ::=	(AssignDest) Designator
				|
				(NoDes) /* epsilon */
				;	   

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;
				
Condition ::= 	(ORTerm) Condition OR CondTerm 
				|
				(CondORFact) CondTerm
				;				

CondTerm ::=	(AndTerm) CondTerm AND CondFact
				|
				(CondAndFact) CondFact
				;
				
CondFact ::= (RelExpr) CondFact RelOp Expr
			|
			(BoolExpr) Expr
			;

Expr ::= (AddExpr) Expr:te AddOp Term:t
		 |
		 (TermExpr) Term:t
		 |
		 (NegTermExpr) MINUS Term:t
		 ;

Term ::= 	(MulTerm) Term:tt MulOp Factor:t
			|
			(TermSingle) Factor:t
			;

Factor ::= (Const) ConstVal
			|
		   (Var) Designator:d
		   	|
		   (ArgCall) LPAREN Expr RPAREN
		   |
		   (NewObj) NEW Type LBOX Expr RBOX
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;
		   
Designator ::= 	(Desig) IDENT:name
				|
				(ArrayDesignator) IDENT:name LBOX Expr RBOX
				;
				
RelOp ::=	(EqOp) EQUAL
			|
			(NeqOp) NEQUAL
			|
			(LssOp) LSS
			|
			(LsEOp) LSSE
			|
			(GrtOp) GRT
			|
			(GrtEOp) GRTE
			;

AddOp ::=	(AddsOp) PLUS 
			|
		 	(SubOp) MINUS
			;

MulOp ::= 	(MulsOp) MUL
			|
		 	(DivOp) DIV
			|
		 	(ModOp) MOD
			;
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}


init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, CONST, NEW, READ, EXTENDS, CONTINUE;
terminal PLUS, EQUAL, INCR, DECR, ASSIGN, NEQUAL, GRT, GRTE, LSS, LSSE, MINUS, MUL, DIV, MOD, AND, OR;
terminal DOT, COLON, SEMI, COMMA, LBRACE, RBRACE, LPAREN, RPAREN, LBOX, RBOX, DBLARROW;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;
terminal IF, ELSE, WHILE, FOREACH;

nonterminal MethodDeclList, DeclList, VarDecl, ConstDecl, ClassDecl, VarNameList, VarName, Assign;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, AddOp, MulOp, RelOp, Decl, DesignatorStatement;
nonterminal ClassExtend, ClassBody, VarDeclList, ClassMethodList, ConstructorDeclList, ConstructorDecl, MemberDeclList;
nonterminal  AssignList, AssignDes, Condition, CondTerm, CondFact, GlobalMethodDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct PrintExpr, Type, Term, Expr, Factor, ConstVal, ConstName, ConstNameList;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE GlobalMethodDecl RBRACE
			;

ProgName ::= (ProgName) IDENT:pName
			;

GlobalMethodDecl ::= (GlobalMethods) MethodDeclList
					|
					(NoGlobalMethods) /*epsilon*/
					;

DeclList ::= (Declarations) DeclList Decl
			|
			(NoDecl)/* epsilon */ 
			;
				
Decl ::= 	(DeclVar) VarDecl
			|
			(DeclConst) ConstDecl
			|
			(DeclClass) ClassDecl
			;
				
VarDecl ::= (VarDeclaration) Type:varType VarNameList:varList SEMI
			|
			(ErrVarDecl) Type:varType VarNameList error SEMI:l
			{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do ; u liniji " + lleft, null); :}
			;

VarNameList ::= (VarList)	VarNameList:vnl COMMA VarName:varName
				|
				(ErrVarDeclList) VarNameList:vnl error COMMA:l VarName:varName
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do , u liniji " + lleft, null); :}
				|
				(SingleVar)	VarName:varName
				;

VarName ::= (VarSingleName)	IDENT:name
			|
			(VarArrayName)	IDENT:name LBOX RBOX
			;


ConstDecl ::=	(ConstDecl) CONST Type:constType ConstNameList SEMI
				;

ConstNameList ::=(GlobalConstDeclList) ConstNameList COMMA ConstName
				|
				(GlobalConst)	ConstName
				;

ConstName ::= (ConstName) IDENT:constName ASSIGN ConstVal:constVal
			;

ConstVal ::=(NumConst) NUMCONST
			|
			(BoolConst)	BOOLCONST
			|
			(CharConst)	CHARCONST
			;

ClassDecl ::= 	(ClassDeclaration) CLASS IDENT:className ClassExtend ClassBody:cb RBRACE
				;

ClassExtend ::= (ExtendClause) EXTENDS Type:classParent LBRACE
				|
				(NoClassExtend) LBRACE
				|
				(ErrExtendClass)  error LBRACE:l
				{: parser.report_error("Uspesan oporavak od greske pri prosirivanju nadklase do } u liniji " + lleft, null); :}
				;
				
ClassBody ::= 	(ClassBodyDecl) VarDeclList:vl LBRACE ClassMethodList:cml RBRACE
				|
				(ErrClassVarDecl) VarDeclList:vl error LBRACE:l ClassMethodList:cml RBRACE
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju polja unutrasnje klase do } u liniji " + lleft, null); :}
				;

VarDeclList ::= (VarDecls) VarDeclList VarDecl
				|
				(NoVars) /* epsilon */
				;
				


ClassMethodList	::= (ClassMethods)LBRACE MemberDeclList RBRACE
					|
					(NoClassMethods) /* epsilon */
					;
					

MemberDeclList ::= (MembersConstrMeth) ConstructorDeclList MethodDeclList
					|
					(MembersNoConstrMeth) MethodDeclList
					|
					(MembersConstrNoMeth) ConstructorDeclList
					|
					(NoMembers) /* epsilon */
					;

ConstructorDeclList ::= (Constructors) ConstructorDeclList ConstructorDecl
						|
						(Constr) ConstructorDecl
						; 

ConstructorDecl ::= (ConstructorDecl) IDENT:className LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
					;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(Meth) MethodDecl
					;

MethodDecl ::= 	(MethodDecl) MethodTypeName LPAREN FormPars VarDeclList LBRACE StatementList RBRACE
			   ;

MethodTypeName ::= 	(MethodNonVoidName) Type:retType IDENT:methName
					|
					(MethodVoidName) VOID IDENT:methName
					;

FormPars ::= 	(FormParams) FormalParamList:fpl RPAREN
				|
				(ErrFormParams) FormalParamList:fpl error RPAREN:l
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju formalnog parametra funkcije do ) u liniji " + lleft, null); :}
				| 
				(NoFormParam) RPAREN
				;

FormalParamList ::= (FormalParamDecls) FormalParamList:fl COMMA FormalParamDecl:fpd
					|
					(ErrFormalParamDecl) FormalParamList:fl error COMMA:l FormalParamDecl:fpd
					{: parser.report_error("Uspesan oporavak od greske pri deklarisanju formalnog parametra funkcije do , u liniji " + lleft, null); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:fpd
					;
					
FormalParamDecl ::= (FormalParamDeclSing) Type IDENT 
					|
					(FormalParamArrayDecl) Type IDENT LBOX RBOX
					;

Type ::= (Type) IDENT:typeName
		;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::=	(SingleStatement) DesignatorStatement
				|
				(Read) READ LPAREN Designator RPAREN SEMI
				|
				(Print) PRINT LPAREN PrintExpr RPAREN SEMI
				|
				(If) IF LPAREN Condition RPAREN Statement
				|
				(ErrIfCond) IF LPAREN error RPAREN:l Statement:stmt
				{: parser.report_error("Uspesan oporavak od greske uslova if iskaza do ) u liniji " + lleft, null); :}
				|
				(IfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				(While) WHILE LPAREN Condition RPAREN Statement
				|
				(Break) BREAK SEMI
				|
				(Continue) CONTINUE SEMI
				|
				(ReturnNoExpr) RETURN SEMI
				|
				(ReturnExpr) RETURN Expr:t SEMI
				|
				(ForEach) Designator DOT FOREACH LPAREN IDENT:e DBLARROW Statement RPAREN SEMI
				|
				(StatementBlock) LBRACE StatementList RBRACE
				;
			
PrintExpr ::=	(PrintE) Expr
				| 
				(PrintNum) Expr COMMA NUMCONST
				;

DesignatorStatement ::= (Assignment) Designator:dest Assign Expr:e SEMI
						|
						(ErrAssignment) Designator Assign error SEMI:l
			  			{: parser.report_error("Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji " + lleft, null); :}
			  			|
			  			(MulAssignment) LBOX AssignList:des RBOX Assign Designator:arr SEMI
			  			|
			  			(ErrMulAssignment) LBOX AssignList:des RBOX Assign error SEMI:l
			  			{: parser.report_error("Uspesan oporavak od greske pri visestrukoj dodeli vrednosti do ; u liniji " + lleft, null); :}
			  			|
			  			(Incr) Designator INCR SEMI
			  			|
			  			(Decr) Designator DECR SEMI
			  			|
					  	(ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
					  	;



AssignList ::=	(AssignMul) AssignList COMMA AssignDes
				|
				(AssignSingle) AssignDes
				;

AssignDes ::=	(AssignDest) Designator
				|
				(NoDes) /* epsilon */
				;	   

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;
				
Condition ::= 	(ORTerm) Condition OR CondTerm 
				|
				(CondORFact) CondTerm
				;				

CondTerm ::=	(AndTerm) CondTerm AND CondFact
				|
				(CondAndFact) CondFact
				;
				
CondFact ::= (RelExpr) CondFact RelOp Expr
			|
			(BoolExpr) Expr
			;

Expr ::= (AddExpr) Expr:te AddOp Term:t
		 |
		 (TermExpr) Term:t
		 |
		 (NegTermExpr) MINUS Term:t
		 ;

Term ::= 	(MulTerm) Term:term MulOp Factor:factor
			|
			(TermSingle) Factor:factor
			;

Factor ::= (Const) ConstVal
			|
		   (Var) Designator:d
		   	|
		   (ArgCall) LPAREN Expr RPAREN
		   |
		   (NewArray) NEW Type LBOX Expr RBOX
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;
		   
Designator ::= 	(Desig) IDENT:name
				|
				(ArrayDesignator) IDENT:name LBOX Expr RBOX
				;

Assign ::= ASSIGN;
	
RelOp ::=	(EqOp) EQUAL
			|
			(NeqOp) NEQUAL
			|
			(LssOp) LSS
			|
			(LssEOp) LSSE
			|
			(GrtOp) GRT
			|
			(GrtEOp) GRTE
			;

AddOp ::=	(AddsOp) PLUS 
			|
		 	(SubOp) MINUS
			;

MulOp ::= 	(MulsOp) MUL
			|
		 	(DivOp) DIV
			|
		 	(ModOp) MOD
			;
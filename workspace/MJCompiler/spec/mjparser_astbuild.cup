package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}


init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, CONST, NEW, READ, EXTENDS, CONTINUE;
terminal PLUS, EQUAL, INCR, DECR, ASSIGN, NEQUAL, GRT, GRTE, LSS, LSSE, MINUS, MUL, DIV, MOD, AND, OR;
terminal DOT, COLON, SEMI, COMMA, LBRACE, RBRACE, LPAREN, RPAREN, LBOX, RBOX, DBLARROW;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;
terminal IF, ELSE, WHILE, FOREACH;

nonterminal MethodDeclList MethodDeclList;
nonterminal DeclList DeclList;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ClassDecl ClassDecl;
nonterminal VarNameList VarNameList;
nonterminal AssExpr AssExpr;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal AddOp AddOp;
nonterminal MulOp MulOp;
nonterminal RelOp RelOp;
nonterminal Decl Decl;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal VarDeclList VarDeclList;
nonterminal VarNameDecl VarNameDecl;
nonterminal VarListEntry VarListEntry;
nonterminal GlobalMethodDecl GlobalMethodDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct PrintExpr, Type, Term, Expr, Factor, ConstVal, ConstName, ConstNameList, VarName;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE GlobalMethodDecl:G2 RBRACE {: RESULT=new Program(p, D1, G2); RESULT.setLine(pleft); :}
			;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :}
			;

GlobalMethodDecl ::= (GlobalMethods) MethodDeclList:M1 {: RESULT=new GlobalMethods(M1); RESULT.setLine(M1left); :}
					|
					(NoGlobalMethods) {: RESULT=new NoGlobalMethods(); :} /*epsilon*/
					;

DeclList ::= (Declarations) DeclList:D1 Decl:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}
			|
			(NoDecl) {: RESULT=new NoDecl(); :}/* epsilon */ 
			;
				
Decl ::= 	(DeclVar) VarDecl:V1 {: RESULT=new DeclVar(V1); RESULT.setLine(V1left); :}
			|
			(DeclConst) ConstDecl:C1 {: RESULT=new DeclConst(C1); RESULT.setLine(C1left); :}
			;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVars) {: RESULT=new NoVars(); :} /* epsilon */
				;
	
VarDecl ::= (VarDeclaration) Type:varType VarNameDecl:V1 {: RESULT=new VarDeclaration(varType, V1); RESULT.setLine(varTypeleft); :}
			;

VarNameDecl ::= (VarNameDecls) VarNameList:varList SEMI {: RESULT=new VarNameDecls(varList); RESULT.setLine(varListleft); :}
				|
				(ErrVarDecl) error SEMI:l
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do ; u liniji " + lleft, null); :} {: RESULT=new ErrVarDecl(); :}
				;

VarNameList ::= (VarList) VarListEntry:vnl VarName:varName {: RESULT=new VarList(vnl, varName); RESULT.setLine(vnlleft); :}
				|
				(SingleVar)	VarName:varName {: RESULT=new SingleVar(varName); RESULT.setLine(varNameleft); :}
				;

VarListEntry ::= (VarListEntries) VarListEntry:V1 VarName:varName COMMA {: RESULT=new VarListEntries(V1, varName); RESULT.setLine(V1left); :}
				|
				(ErrVarDeclList) error COMMA:l
				{: parser.report_error("Uspesan oporavak od greske pri deklarisanju promenljive do , u liniji " + lleft, null); :} {: RESULT=new ErrVarDeclList(); :}
				|
				(VarListEntrySingle) VarName:varName COMMA {: RESULT=new VarListEntrySingle(varName); RESULT.setLine(varNameleft); :}
				;

VarName ::= (VarSingleName)	IDENT:name {: RESULT=new VarSingleName(name); RESULT.setLine(nameleft); :}
			|
			(VarArrayName)	IDENT:name LBOX RBOX {: RESULT=new VarArrayName(name); RESULT.setLine(nameleft); :}
			|
			(VarMatrixName)	IDENT:name LBOX RBOX LBOX RBOX {: RESULT=new VarMatrixName(name); RESULT.setLine(nameleft); :}
			;


ConstDecl ::=	(ConstDecl) CONST Type:constType ConstNameList:C1 SEMI {: RESULT=new ConstDecl(constType, C1); RESULT.setLine(constTypeleft); :}
				;

ConstNameList ::=(GlobalConstDeclList) ConstNameList:C1 COMMA ConstName:C2 {: RESULT=new GlobalConstDeclList(C1, C2); RESULT.setLine(C1left); :}
				|
				(GlobalConst)	ConstName:C1 {: RESULT=new GlobalConst(C1); RESULT.setLine(C1left); :}
				;

ConstName ::= (ConstName) IDENT:constName ASSIGN ConstVal:constVal {: RESULT=new ConstName(constName, constVal); RESULT.setLine(constNameleft); :}
			;

ConstVal ::=(NumConst) NUMCONST:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
			|
			(BoolConst)	BOOLCONST:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
			|
			(CharConst)	CHARCONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
			;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(Meth) MethodDecl:M1 {: RESULT=new Meth(M1); RESULT.setLine(M1left); :}
					;

MethodDecl ::= 	(MethodDecl) MethodTypeName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(M1, V2, S3); RESULT.setLine(M1left); :}
			   ;

MethodTypeName ::= 	(MethodNonVoidName) Type:retType IDENT:methName {: RESULT=new MethodNonVoidName(retType, methName); RESULT.setLine(retTypeleft); :}
					|
					(MethodVoidName) VOID IDENT:methName {: RESULT=new MethodVoidName(methName); RESULT.setLine(methNameleft); :}
					;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
		;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::=	(SingleStatement) DesignatorStatement:D1 {: RESULT=new SingleStatement(D1); RESULT.setLine(D1left); :}
				|
				(Read) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new Read(D1); RESULT.setLine(D1left); :}
				|
				(Print) PRINT LPAREN PrintExpr:P1 RPAREN SEMI {: RESULT=new Print(P1); RESULT.setLine(P1left); :}
				;
			
PrintExpr ::=	(PrintE) Expr:E1 {: RESULT=new PrintE(E1); RESULT.setLine(E1left); :}
				| 
				(PrintNum) Expr:E1 COMMA NUMCONST:N2 {: RESULT=new PrintNum(E1, N2); RESULT.setLine(E1left); :}
				;

DesignatorStatement ::= (Assignment) Designator:dest ASSIGN AssExpr:A1 {: RESULT=new Assignment(dest, A1); RESULT.setLine(destleft); :}
			  			|
			  			(Incr) Designator:D1 INCR SEMI {: RESULT=new Incr(D1); RESULT.setLine(D1left); :}
			  			|
			  			(Decr) Designator:D1 DECR SEMI {: RESULT=new Decr(D1); RESULT.setLine(D1left); :}
					  	;

AssExpr ::= (AssignExpr) Expr:e SEMI {: RESULT=new AssignExpr(e); RESULT.setLine(eleft); :}
			|
			(ErrAssignment)error SEMI:l
			{: parser.report_error("Uspesan oporavak od greske pri dodeli vrednosti do ; u liniji " + lleft, null); :} {: RESULT=new ErrAssignment(); :}
			;

Expr ::= (AddExpr) Expr:te AddOp:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 |
		 (NegTermExpr) MINUS Term:t {: RESULT=new NegTermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= 	(MulTerm) Term:term MulOp:M1 Factor:factor {: RESULT=new MulTerm(term, M1, factor); RESULT.setLine(termleft); :}
			|
			(TermSingle) Factor:factor {: RESULT=new TermSingle(factor); RESULT.setLine(factorleft); :}
			;

Factor ::= (Const) ConstVal:C1 {: RESULT=new Const(C1); RESULT.setLine(C1left); :}
			|
		   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		   	|
		   (ArgCall) LPAREN Expr:E1 RPAREN {: RESULT=new ArgCall(E1); RESULT.setLine(E1left); :}
		   |
		   (NewArray) NEW Type:T1 LBOX Expr:e RBOX {: RESULT=new NewArray(T1, e); RESULT.setLine(T1left); :}
		   |
		   (NewMatrix) NEW Type:T1 LBOX Expr:e1 RBOX LBOX Expr:e2 RBOX {: RESULT=new NewMatrix(T1, e1, e2); RESULT.setLine(T1left); :}
		   ;
		   
Designator ::= 	(Desig) IDENT:name {: RESULT=new Desig(name); RESULT.setLine(nameleft); :}
				|
				(ArrayDesignator) IDENT:name LBOX Expr:e RBOX {: RESULT=new ArrayDesignator(name, e); RESULT.setLine(nameleft); :}
				|
				(MatrixDesignator) IDENT:name LBOX Expr:e1 RBOX LBOX Expr:e2 RBOX {: RESULT=new MatrixDesignator(name, e1, e2); RESULT.setLine(nameleft); :}
				;
	
RelOp ::=	(EqOp) EQUAL {: RESULT=new EqOp(); :}
			|
			(NeqOp) NEQUAL {: RESULT=new NeqOp(); :}
			|
			(LssOp) LSS {: RESULT=new LssOp(); :}
			|
			(LssEOp) LSSE {: RESULT=new LssEOp(); :}
			|
			(GrtOp) GRT {: RESULT=new GrtOp(); :}
			|
			(GrtEOp) GRTE {: RESULT=new GrtEOp(); :}
			;

AddOp ::=	(AddsOp) PLUS {: RESULT=new AddsOp(); :} 
			|
		 	(SubOp) MINUS {: RESULT=new SubOp(); :}
			;

MulOp ::= 	(MulsOp) MUL {: RESULT=new MulsOp(); :}
			|
		 	(DivOp) DIV {: RESULT=new DivOp(); :}
			|
		 	(ModOp) MOD {: RESULT=new ModOp(); :}
			;